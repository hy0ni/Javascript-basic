//🍐연산자(operator)
// 자바스크립트는 여러 종류의 연산을 위한 다양한 연산자(operator)를 제공하고 있습니다.

/* 
🍐 산술 연산자(arithmetic operator)
산술 연산자는 사칙연산을 다루는 가장 기본적이면서도 많이 사용하는 연산자입니다.
산술 연산자는 모두 두 개의 피연산자를 가지는 이항 연산자이며, 피연산자들의 결합 방향은 왼쪽에서 오른쪽입니다.
**항이란 해당 연산의 실행이 가능하기 위해 필요한 값이나 변수를 의미합니다.
따라서 이항 연산자란 해당 연산의 실행을 위해서 두 개의 값이나 변수가 필요한 연산자를 의미합니다.

산술 연산자	                      설명
+	왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 더함.
-	왼쪽 피연산자의 값에서 오른쪽 피연산자의 값을 뺌.
*	왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 곱함.
/	왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눔.
%	왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 나머지를 반환함.
*/
let x = 20, y = 10;
console.log(x + y); // 30
console.log(x - y); // 10
console.log(x * y); // 200
console.log(x / y); // 2
console.log(x % y); // 0

/* 
🍐 연산자의 우선순위(operator precedence)와 결합 방향(associativity)
연산자의 우선순위는 수식 내에 여러 연산자가 있을 경우,
어느 연산자가 먼저 처리될 것인가를 결정합니다.

만약 연산자 우선순위를 무시하고 연산자의 처리 순서를 변경하고 싶다면 괄호()를 사용하여 먼저 계산할 부분을 지정할 수 있습니다. 

기본 처리 순서
result = 2 + 3 * 5;
1. 3 * 5
2. 3 * 5 = 15 + 2
result =  17

괄호를 사용한 순서 변경
result = (2 + 3) * 5;
1. 2 + 3
2. 2 + 3 = 5 * 5
result = 25

연산자의 결합 방향은 수식 내에 우선순위가 같은 연산자가 둘 이상 있을 때, 먼저 어느 연산을 수행할 것인가를 결정합니다.

왼쪽에서 오른쪽으로 결합
result = 2 + 3 - 5
-------->
1. 2 + 3
2. 2 + 3 = 5 - 5
result = 0

오른쪽에서 왼쪽으로 결합
let b = 3;
let c = 5;
let a = b = c;
a에 b를 대입 -> b에 c를 대입 -> a의 값은 c의 값인 5가 됩니다.
console.log(a) // 5

🍐 자바스크립트 연산자의 우선순위표
https://www.tcpschool.com/javascript/js_operator_arithmetic
위의 표에서 나온 순서대로 우선순위가 빠른 연산자가 가장 먼저 실행됩니다.

또한, 같은 우선순위를 가지는 연산자가 둘 이상 있을 때에는 결합 순서에 따라 실행 순서가 결정됩니다.
**우선순위 표는 필요할 때마다 참조하는 것이 좋습니다.
*/












/* */
/* */
/* */
/* */
/* */
/* */