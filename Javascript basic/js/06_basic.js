// 🍐대입 연산자(assignment operator)
/*
대입 연산자는 변수에 값을 대입할 때 사용하는 이항 연산자이며, 피연산자들의 결합 방향은 오른쪽에서 왼쪽입니다.

또한, 앞서 살펴본 산술 연산자와 결합한 다양한 복합 대입 연산자가 존재합니다.

대입 연산자	                          설명
=	                  왼쪽 피연산자에 오른쪽 피연산자의 값을 대입함.
+=	                왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 더한 후, 그 결괏값을 왼쪽 피연산자에 대입함.
-=	                왼쪽 피연산자의 값에서 오른쪽 피연산자의 값을 뺀 후, 그 결괏값을 왼쪽 피연산자에 대입함.
*=	                왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 곱한 후, 그 결괏값을 왼쪽 피연산자에 대입함.
/=	                왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 결괏값을 왼쪽 피연산자에 대입함.
%=	                왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 나머지를 왼쪽 피연산자에 대입함.
*/
{
  let x = 10, y = 10, z = 10;
  console.log(x = x - 5); //5
  console.log(y -= 5); // y = y - 5 와 같은 표현임. //5
  console.log(z = - 5); // z = -5 와 같은 표현임. //-5
}
/*
위의 예제에서 z =- 5 연산은 단순히 -5를 변수 z에 대입하는 연산 입니다.
이처럼 복합 대입 연산자에서 연산자의 순서는 매우 중요하므로 주의를 기울여야 합니다.
*/


/*
🍐 증감 연산자(increment and decrement operator)
증감 연산자는 피연산자를 1씩 증가시키거나 감소시킬 때 사용하는 연산자입니다.
이 연산자는 피연산자가 단 하나뿐인 단항 연산자입니다.

증감 연산자는 해당 연산자가 피연산자의 어느 쪽에 위치하는가에 따라 연산의 순서 및 결과가 달라집니다.

증감 연산자	                        설명
++x	         먼저 피연산자의 값을 1 증가시킨 후에 해당 연산을 진행함.
x++	         먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 증가시킴.
--x	         먼저 피연산자의 값을 1 감소시킨 후에 해당 연산을 진행함.
x--	         먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 감소시킴.
*/
{
  // 전위 증가
  let a = 10;
  let result = ++a - 3;
  console.log(++a); // 12
  console.log(`전위증가: ${result}`);// 8
  // 피연산자 앞에 ++연산자를 붙여서 사용하면 증감 연산자는 수를 증가시키고 증가 후 값을 반환합니다.
}
{
  // 후위 증가
  let a = 10;
  let result = a++ - 3
  console.log(a++); // 11
  console.log(`후위증가: ${result}`); // 7
  //피연산자 뒤에 ++연산자를 붙여서 사용하면 증감 연산자는 수를 증가시키고 증가하기 전 값을 반환합니다.
}
{
  // 증감 연산자의 연산 순서 살펴보기
  let x = 10;
  let y = x-- + 5 + --x;
  console.log(`x: ${x}, y: ${y}`); // x: 8, y: 23
  /*
  ① : 첫 번째 감소 연산자(decrement operator)는 피연산자의 뒤쪽에 위치하므로, 덧셈 연산이 먼저 수행됩니다.
  ② : 덧셈 연산이 수행된 후에 감소 연산이 수행됩니다. (x의 값 : 9)
  ③ : 두 번째 감소 연산자는 피연산자의 앞쪽에 위치하므로, 덧셈 연산보다 먼저 수행됩니다. (x의 값 : 8)
  ④ : 감소 연산이 수행된 후에 덧셈 연산이 수행됩니다.
  ⑤ : 마지막으로 변수 y에 결괏값의 대입 연산이 수행됩니다. (y의 값 : 23)
  */
}

/*
🍐 비교 연산자(comparison operator)
비교 연산자는 피연산자 사이의 상대적인 크기를 판단하여, 
참(true)과 거짓(false)을 반환합니다.
비교 연산자는 모두 두 개의 피연산자를 가지는 이항 연산자이며, 피연산자들의 결합 방향은 왼쪽에서 오른쪽입니다.

비교 연산자	                            설명
==	         왼쪽 피연산자와 오른쪽 피연산자의 값이 같으면 참을 반환함.
===	         왼쪽 피연산자와 오른쪽 피연산자의 값이 같고, 같은 타입이면 참을 반환함.
!=	         왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않으면 참을 반환함.
!==	         왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않거나, 타입이 다르면 참을 반환함.
>	           왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크면 참을 반환함.
>=	         왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크거나 같으면 참을 반환함.
<          	 왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작으면 참을 반환함.
<=	         왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작거나 같으면 참을 반환함.

자바스크립트에서 비교 연산자는 피연산자의 타입에 따라 두 가지 기준으로 비교를 진행합니다.


1. 피연산자가 둘 다 숫자면, 해당 숫자를 서로 비교합니다.
2. 피연산자가 둘 다 문자열이면, 문자열의 첫 번째 문자부터 알파벳 순서대로 비교합니다.
*/
console.log('a' > 'b'); // false
// a가 b보다 큰가? a가 b보다 작다.
// 알파벳 순서상 'a'가 'b'보다 먼저 나오므로 'a'가 'b'보다 작음.


/*
🍐 동등 연산자와 일치 연산자
동등 연산자(==, equal)와 일치 연산자(===, strict equal)는 모두 두 개의 피연산자가 서로 같은지를 비교해 줍니다.

동등 연산자(==)는 두 피연산자의 값이 서로 같으면 참(true)을 반환합니다.
이때 두 피연산자의 타입이 서로 다르면, 비교를 위해 강제로 타입을 같게 변환합니다.

하지만 일치 연산자(===)는 타입의 변환 없이 두 피연산자의 값이 같고, 타입도 같아야만 참(true)을 반환합니다.


==와 != 동등성과 불일치성을 테스트하는 데 사용합니다.
==와 != 값이 동일한지는 테스트하지만, 값의 데이터 유형이 동일한지의 여부는 테스트하지 않습니다.

===와 !== 값과 값의 데이터 유형의 동일성을 모두 테스트합니다. 
===와 !== 오류가 적은 편이기 때문에 ===/!==사용하는 것을 권장합니다.
**참고: => 는 연산자가 아닌 화살표 함수의 표기법입니다.
*/
{
  let x = 3;
  let y = "3";
  console.log(x == y); // true
  console.log(x === y); // false

  console.log(0 == false); //true
  console.log(0 === false); // false
  console.log('' == false); // true
  console.log('' === false); // false
  console.log(null == undefined); //true
  console.log(null === undefined); // false
  //부등 연산자(!=)와 불일치 연산자(!==)는 각각 동등 연산자와 일치 연산자의 비교와 정확히 반대로 동작합니다.
}