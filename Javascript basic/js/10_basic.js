/*
🍐반복문(iteration statements)
반복문이란 프로그램 내에서 똑같은 명령을 일정 횟수만큼 반복하여 수행하도록 제어하는 실행문입니다.

프로그램이 처리하는 대부분의 코드는 반복적인 형태가 많으므로, 가장 많이 사용되는 실행문 중 하나입니다.

자바스크립트에서 사용할 수 있는 반복문 
1. while 문
2. do / while 문
3. for 문
4. for / in 문
5. for / of 문
*/

/* 🍌 while 반복문
while 문은 특정 조건을 만족할 때까지 계속해서 주어진 실행문을 반복 실행합니다.
while (표현식) {
    표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문;
}
while 문은 우선 표현식이 참(true)인지를 판단하여 참이면 내부의 실행문을 실행합니다.
내부의 실행문을 전부 실행하고 나면, 다시 표현식으로 돌아와 또 한 번 표현식이 참인지를 판단하게 됩니다.
이렇게 표현식의 검사를 통해 반복해서 실행되는 반복문을 루프(loop)라고 합니다.
*/
{//while 반복문 예제)
  let i = 0;
  while (i < 5) { // 변수 i가 10보다 작을 때만 while 문을 반복함.
    console.log(i);
    i++; // 반복할 때마다 변수 i를 1씩 증가시켜 변수 i가 5보다 커지면 반복문을 종료합니다.
  }
  /*
  while 문 내부에 표현식의 결과를 변경하는 실행문이 존재하지 않을 경우 프로그램은 루프를 영원히 반복하게 됩니다.
  이것을 무한 루프(infinite loop)에 빠졌다고 하며, 무한 루프에 빠진 프로그램은 영원히 종료되지 않습니다.
  무한 루프는 특별히 의도한 경우가 아니라면 반드시 피해야 합니다.
  따라서 while 문을 작성할 때는 표현식의 결과가 어느 순간에는 거짓(false)을 갖도록 표현식를 변경하는 실행문을 반드시 포함해야 합니다.
  참고:while 문에서 실행될 실행문이 한 줄 뿐이라면 중괄호({})를 생략할 수 있습니다
  */
}
/* 
🍌 do / while 문
while 문은 루프에 진입하기 전에 먼저 표현식부터 검사합니다.
하지만 do / while 문은 먼저 루프를 한 번 실행한 후에 표현식을 검사합니다.
즉, do / while 문은 표현식의 결과와 상관없이 무조건 한 번은 루프를 실행합니다.
do {
    표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문;
} while (표현식);
*/
{ //do / while 문 예제)
  let i = 1, j = 1;

  while (i > 3) { // 변수 i의 초깃값은 1이기 때문에 이 while 문은 한 번도 실행되지 않음.
    console.log(`i: ${i++}`);
  }
  do { // 변수 j의 초깃값은 1이기 때문에 이 do / while 문은 단 한 번만 실행됨.
    console.log(`j: ${j++}`); //1
  } while (j > 3);

}

console.clear();
/* 
🍌 for 문
for 문은 while 문과는 달리 자체적으로 초기식, 표현식, 증감식을 모두 포함하고 있는 반복문입니다.
따라서 while 문보다는 좀 더 간결하게 반복문을 표현할 수 있습니다.
for (초기식; 표현식; 증감식) {
    표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문;
}
for 문을 구성하는 초기식, 표현식, 증감식은 각각 생략될 수 있습니다.
또한, 쉼표 연산자(,)를 사용하면 여러 개의 초기식이나 증감식을 동시에 사용할 수도 있습니다.
*/
{ //for 문 예제
  for (let i = 1; i < 10; i++) {
    console.log(i);
  }
  // 1 ~ 9까지 출력됩니다.
  //for 문에서 실행될 실행문이 한 줄 뿐이라면 중괄호({})를 생략할 수 있습니다
}

/*
🍌for / in 문
for / in 문은 일반적인 for 문과는 전혀 다른 형태의 반복문입니다.
for / in 문은 해당 객체의 모든 열거할 수 있는 프로퍼티(enumerable properties)를 순회할 수 있도록 해줍니다.
**참고: 열거할 수 있는 프로퍼티란 내부적으로 enumerable 플래그가 true로 설정된 프로퍼티를 의미합니다.
이러한 프로퍼티들은 for / in 문으로 접근할 수 있게 됩니다.

🍬 객체 프로퍼티는 값(value)과 함께 플래그(flag)라 불리는 특별한 속성 세 가지를 갖는다.
- writable : true이면 값을 수정할 수 있다. 그렇지 않다면 읽기만 가능하다.
- enumerable : true이면 반복문을 사용해 나열할 수 있다. 그렇지 않다면 반복문을 사용해 나열할 수 없다.
- configurable : true이면 프로퍼티 삭제나 플래그 수정이 가능하다. 그렇지 않다면 프로퍼티 삭제와 플래그 수정이 불가능하다.
*프로퍼티 플래그는 특별한 경우가 아니고선 다룰일이 없다. 평범한 방식으로 프로퍼티를 만들게 되면 해당 프로퍼티의 플래그는 모두 true가 되며 true로 설정된 플래그는 언제든 수정할 수 있다.

for / in 반복문은  루프마다 객체의 열거할 수 있는 프로퍼티의 이름을 지정된 변수에 대입합니다.
이렇게 전달받은 변수를 이용하면 루프 안에서 객체의 열거할 수 있는 프로퍼티에 순차적으로 접근할 수 있습니다.
  for (변수 in 객체) {
      객체의 모든 열거할 수 있는 프로퍼티의 개수만큼 반복적으로 실행하고자 하는 실행문;
  }
*/
{
  // for / in 문을 사용하여 배열의 요소에 접근하는 예제)
  let arr = [3, 4, 5];

  // for문을 사용했을 때
  for (let i = 0; i < arr.length; i++) { // 배열 arr내부 모든 요소의 인덱스(index)를 출력함.
    console.log(`index: ${i}`); // 0 1 2
  }

  // for / in문을 사용하면 코드가 간결해짐. 
  for (let i in arr) { // 위와 같은 동작을 하는 for / in 문
    console.log(`index: ${i}`); // 0 1 2
  }

  // for / in 문을 사용하여 객체의 프로퍼티에 접근하는 예제)
  let obj = { name: "Hyoni", age: 20 };

  for (let i in obj) {
    console.log(`obj: ${i}`);
  }
  // for / in 문은 해당 객체가 가진 모든 프로퍼티를 반환하는 것이 아닌, 오직 열거할 수 있는 프로퍼티만을 반환합니다.
}

/*
🍌 for / of 문
for / of 문은 반복할 수 있는 객체(iterable objects)를 순회할 수 있도록 해주는 반복문입니다.

자바스크립트에서 반복할 수 있는 객체에는 Array, Map, Set, arguments 객체 등이 있습니다.

이 반복문은 루프마다 객체의 열거할 수 있는 프로퍼티의 값을 지정된 변수에 대입합니다.
  for (변수 of 객체) {
      객체의 모든 열거할 수 있는 프로퍼티의 개수만큼 반복적으로 실행하고자 하는 실행문;
  }
*/
{
  // for / of 문을 사용하여 배열의 요소에 접근하는 예제)
  let arr = [3, 4, 5];

  for (let i = 0; i < arr.length; i++) { // 배열 arr내부 모든 요소를 출력함.
    console.log(`value: ${arr[i]}`); // 3 4 5
  }

  for (let value of arr) { // 위와 같은 동작을 하는 for / of 문
    console.log(`value: ${value}`); // 3 4 5
  }
  // for / of 문은 익스플로러에서 지원하지 않습니다.
}
{
  // for / of 문을 사용하여 Set 객체의 프로퍼티에 접근하는 예제)
  let arr = new Set([1, 1, 2, 2, 3, 3]);

  for (let value of arr) {
    console.log(`프로퍼티: ${value}`); //1 2 3
  }
  /*
  위 예제는 중복값이 있는 arr배열을 Set 객체로 만들어 중복을 제거한 후,
  for/of 반복문을 사용하여 arr배열의 요소들을 반환합니다.

  🍬Set 객체: Set 객체는 중복을 허용하지 않는 유일한 값들의 집합입니다.
  Set내의 값은 유일해야 하기 때문에 값이 같은지 검사를 수행합니다.
  Set 객체는 new연산자를 사용하여 생성하고, 인자로 iterable 객체를 전달합니다.
  배열은 iterable 객체이므로, 배열을 인자로 전달하여 Set객체를 생성할 수 있습니다.
  Set은 length가 아닌 size로 개수를 확인합니다.
  */
}